{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"at",
				"_attr_access"
			],
			[
				"compile-proc",
				"compile-proc-application"
			],
			[
				"body",
				"bodyAndSubject"
			],
			[
				"regEx",
				"regExesIdx"
			],
			[
				"co",
				"computed"
			],
			[
				"bacg",
				"background-color"
			],
			[
				"font",
				"font-family"
			],
			[
				"table",
				"table-cell"
			],
			[
				"string",
				"string_to_eval"
			],
			[
				"built",
				"builtin"
			],
			[
				"macr",
				"macro_expand"
			],
			[
				"builtin",
				"builtinproc"
			],
			[
				"macro",
				"macro_args"
			],
			[
				"code",
				"codeobj"
			],
			[
				"get",
				"get_exp"
			],
			[
				"read",
				"read_key"
			],
			[
				"eva",
				"evaluated_values"
			],
			[
				"Sy",
				"SyntaxError"
			],
			[
				"_un",
				"_unquotesplicing	(global, instance)"
			],
			[
				"unqu",
				"unquote-splicing"
			],
			[
				"str",
				"read_string"
			],
			[
				"th",
				"throwaway"
			],
			[
				"is",
				"isCallable"
			],
			[
				"Native",
				"NativeProcedure	(global, class)"
			],
			[
				"s",
				"substract	(global, class)"
			],
			[
				"logical",
				"logical_and	(global, class)"
			],
			[
				"logic",
				"logical_or	(global, class)"
			],
			[
				"Nativ",
				"NativeProcedure	(global, class)"
			],
			[
				"Nati",
				"NativeProcedure	(global, class)"
			],
			[
				"lo",
				"loispy"
			],
			[
				"NOt",
				"NotImplementedError	(builtin, class)"
			],
			[
				"apply",
				"apply_proc(env)	(local, function)"
			],
			[
				"analyze",
				"analyze_sequence(seq)	(global, function)"
			],
			[
				"set",
				"set_var(env)	(local, function)"
			],
			[
				"Sym",
				"Symbol"
			],
			[
				"Key",
				"KeyboardInterrupt	(builtin, class)"
			],
			[
				"analy",
				"analyze_sequence(seq)	(global, function)"
			],
			[
				"analyz",
				"analyze_if(exp)	(global, function)"
			],
			[
				"nOt",
				"NotImplementedError"
			],
			[
				"Not",
				"NotImplementedError	(builtin, class)"
			],
			[
				"token",
				"tokenize(str)	(global, function)"
			],
			[
				"for",
				"for	for (…) {…}"
			],
			[
				"toki",
				"token_list"
			],
			[
				"Pair",
				"PairElement"
			],
			[
				"Pai",
				"PairElement"
			],
			[
				"Pa",
				"PairElement"
			],
			[
				"pair",
				"pair_element"
			],
			[
				"bindin",
				"binding_env"
			],
			[
				"proc",
				"procedure_body"
			],
			[
				"proced",
				"procedure_parameters"
			],
			[
				"ta",
				"is_tagged_list"
			],
			[
				"is_c",
				"is_compound_procedure"
			],
			[
				"pro",
				"procedure"
			],
			[
				"g",
				"global_environment"
			],
			[
				"page",
				"PageExpr"
			],
			[
				"comment",
				"commentsLength"
			],
			[
				"_",
				"_phantom"
			],
			[
				"proto",
				"prototype"
			],
			[
				"if",
				"if	if"
			],
			[
				"or",
				"orderHandler"
			],
			[
				"fu",
				"fun	Function"
			],
			[
				"order",
				"OrderHandler"
			],
			[
				"prod",
				"productName"
			],
			[
				"produ",
				"productName"
			],
			[
				"pr",
				"product_price"
			],
			[
				"result",
				"result_price"
			],
			[
				"search",
				"search_form"
			],
			[
				"step",
				"stepIndex"
			],
			[
				"hand",
				"handle_message"
			],
			[
				"conn",
				"connection"
			],
			[
				"tag",
				"tag_collection"
			],
			[
				"v",
				"VocabProvider"
			],
			[
				"article",
				"article_collection"
			],
			[
				"sentence",
				"sentence_count"
			],
			[
				"sente",
				"sentence_count"
			],
			[
				"word",
				"wordcount"
			],
			[
				"tokenize_",
				"tokenize_text"
			],
			[
				"toke",
				"tokenize_logger"
			],
			[
				"levens",
				"levenshtein_logger"
			],
			[
				"purr",
				"purr_main_logger"
			],
			[
				"levn",
				"levenshtein_match"
			],
			[
				"levensh",
				"levenshtein_match"
			],
			[
				"leven",
				"levenshtein_logger"
			],
			[
				"background",
				"background-color"
			],
			[
				"list-st",
				"list-style-type"
			],
			[
				"list",
				"list-style-type"
			],
			[
				"con",
				"confFile"
			],
			[
				"__",
				"__main___"
			],
			[
				"busines",
				"business_element"
			],
			[
				"declare",
				"declare	order"
			],
			[
				"wordListt",
				"wordListThree"
			],
			[
				"wor",
				"wordListTwo"
			],
			[
				"wordL",
				"wordListOne"
			],
			[
				"wordli",
				"wordListThree"
			],
			[
				"wordl",
				"wordListTwo"
			],
			[
				"worl",
				"wordListTwo"
			],
			[
				"rand",
				"random"
			],
			[
				"wordList",
				"wordListTwo"
			],
			[
				"beer",
				"beerNum"
			],
			[
				"las",
				"laser_weapon_armory"
			],
			[
				"central",
				"central_corridor"
			],
			[
				"gold",
				"gold_room"
			],
			[
				"sphinx",
				"sphinx_moved"
			],
			[
				"player",
				"players_name"
			],
			[
				"bear",
				"bear_room"
			],
			[
				"start",
				"start_point"
			],
			[
				"KWT",
				"KWTextConditionElement"
			]
		]
	},
	"buffers":
	[
		{
			"file": "LICENSE.txt",
			"settings":
			{
				"buffer_size": 1079,
				"line_ending": "Unix"
			}
		},
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 3143,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/loispy/interpreter/main.py",
			"settings":
			{
				"buffer_size": 2067,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/loispy/interpreter/builtin.py",
			"settings":
			{
				"buffer_size": 6284,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/loispy/interpreter/analysis.py",
			"settings":
			{
				"buffer_size": 13339,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/loispy/interpreter/symbol.py",
			"settings":
			{
				"buffer_size": 994,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "import re\nfrom symbol import Symbol, Sym, quotes, _dict, _attr_access\nfrom utils import isa\n\n\nclass AstNode(object):\n    \"\"\"\n    Represents a node in the loispy AST.\n    \"\"\"\n    def __init__(self, tok, line, start, end):\n        self.tok, self.line, self.start, self.end = tok, line, start, end\n        self.exp = None\n\n    def throwaway(self):\n        return self.tok is None or re.match(\"^\\s+$\", self.tok)\n\n    def get_exp(self):\n        if isa(self.exp, list):\n            if self.exp[0] is _dict:\n                return dict(zip(*[n.get_exp() for l in self.exp[1:] for n in l]))\n            else:\n                return [n.get_exp() for n in self.exp]\n        else:\n            return self.exp\n\n    def __str__(self):\n        return \"<AstNode '%s' at %d:%d,%d>%s\\n\" % \\\n                    (self.tok, self.line, self.start, self.end, self.exp)\n\n\ndef atom(tok):\n    booleans = {\"#t\":True, \"#f\":False, \"#n\":None}\n    if tok in booleans:\n        return booleans[tok]\n    elif re.match(\"^\\d+$\", tok):\n        return int(tok)\n    elif re.match(\"^\\d+\\.\\d+$\", tok):\n        return float(tok)\n    else:\n        return Sym(tok)\n\n\ndef getpos(tokens, _str, line=1):\n    # Obviously this doesn't work. But i'll figure it out later.\n    # The general idea is to attach positional info to each tokens.\n    return map(lambda t: (t, line, _str.index(t), _str.index(t) + len(t)), tokens)\n\n\ndef split(_str):\n    return re.compile(\"(\" + \"|\".join([\n        \"\\s+\",                          # whitespace\n        \"#t\", \"#f\", \"#n\",               # booleans\n        \"\\(\", \"\\)\",                     # parens\n        \"\"\"[^\\s\"\\(\\),@'`#\\[\\]\\}\\{]+\"\"\", # symbols\n        \"'\", \"`\", \",@?\", \"#\",           # quotes, lambda shorthand\n        \"[\\[\\]\\{\\}]\"                    # square and curly brackets\n        ]) + \")\").split(_str)\n\n\ndef not_useless(tok):\n    return tok != \"\" and tok is not None\n\n\ndef tokenize(_str):\n    _str = re.sub(\";.*\\n\", \"\", _str) # remove comments\n    _str = re.sub(\"\\s+$\", \"\", _str) #remove trailing whitespace\n    return getpos(filter(not_useless, split(_str)), _str)\n\n\ndef read_string(node, tokens):\n    \"\"\"\n    Accumulate tokens until a double-quote is found, without throwing away\n    whitespace. Set the 'exp' property of the node argument to the accumulated\n    tokens joined as a string. Pop off the closing double quote. Return the\n    mutated node.\n\n    @param AstNode node\n    @param list tokens\n\n    @returns AstNode\n    \"\"\"\n    L = []\n    while tokens[0][0] != \"\\\"\":\n        t, _, _, end = tokens.pop(0)\n        L.append(t)\n    node.end = tokens.pop(0)[3]\n    node.exp = \"\".join(L)\n    node.tok = \"\\\"%s\\\"\" % node.exp\n    return node\n\n\ndef read_list(node, tokens):\n    node.exp = []\n    while tokens[0][0] != \")\":\n        node.exp.append(read(tokens))\n    tokens.pop(0)\n    if node.exp:\n        node.end = node.exp[-1].end\n    else:\n        node.end += 1\n    node.tok = \"(%s)\" % \" \".join([n.tok for n in node.exp])\n    return node\n\n\ndef read_quoted(node, tokens):\n    node.exp = quotes[node.tok]\n    exp = [node, read(tokens)]\n    tok = node.tok + exp[1].tok\n    line, start, end = node.line, node.start, exp[1].end\n    quotednode = AstNode(tok, line, start, end)\n    quotednode.exp = exp\n    return quotednode\n\n\ndef read_key(tokens):\n    node = read(tokens)\n    if not isa(node.exp, Symbol)  or node.tok[0] != \":\":\n        raise SyntaxError(\"Key formatting error: %s\" % node.tok)\n    node.exp = Sym(node.exp[1:])\n    return node\n\n\ndef read_dict(node, tokens):\n    node.exp = [_dict, [], []]\n    while tokens[0][0] != \"}\":\n        node.exp[1].append(read_key(tokens))\n        node.exp[2].append(read(tokens))\n    tokens.pop(0)\n    return node\n\ndef read_attribute_access(node):\n    print node.tok \n    attributes = node.tok.split(\"/\")\n    node.exp = [AstNode(_attr_access, node.line, node.start, node.end)]\n    for a in attributes:\n        node.exp.append(a)\n    return node\n\n\ndef read(tokens):\n    \"\"\"\n    Iterates through a list of strings (tokens) and returns an AstNode object.\n    Warning: this function has side-effects: it mutates its argument (tokens)\n\n    @param list[str] tokens\n\n    @returns AstNode\n    \"\"\"\n    if not tokens:\n        raise SyntaxError(\"Unexpected EOF while reading\")\n    node = AstNode(*tokens.pop(0))\n    if node.throwaway():\n        return read(tokens)\n    else:\n        if node.tok in quotes:\n            return read_quoted(node, tokens)\n        elif \"\\\"\" == node.tok:\n            return read_string(node, tokens)\n        elif \"(\" == node.tok:\n            return read_list(node, tokens)\n        elif \"{\" == node.tok:\n            return read_dict(node, tokens)\n        elif \"/\"  in node.tok:\n            return read_attribute_access(node)\n        elif node.tok in [\"}\", \")\", \"]\", \"[\"]:\n            raise SyntaxError(\"Unexpected token: %s in %s\" %\n                                            (node.tok, [t[0] for t in tokens]))\n        else:\n            node.exp = atom(node.tok)\n            return node\n\n\ndef parse(_str):\n    \"\"\"\n    Parses all the expressions in a given string\n    and provide them as a generator.\n\n    @param str _str\n\n    @yields AstNode\n    \"\"\"\n    tokens = tokenize(_str)\n    while tokens:\n        yield read(tokens)\n",
			"file": "src/loispy/interpreter/parsing.py",
			"file_size": 5175,
			"file_write_time": 1418468855000000,
			"settings":
			{
				"buffer_size": 5176,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "xml/etree/elementtree\n\ngetattr(getattr('xml', 'etree'), 'elementtree')\n\ndef getter(args):\ndef _get(rest):\n    if len(rest) == 1:\n        return rest\n    else:\n        return getattr\n    if len(args) == 1:\n        return args[0]\n    else:\n        last = args.pop()\n        return \"getattr(%s, %s)\" % (getter(args), last)\n\n\n{\n    :a b\n    :2 3\n    :4 5\n}",
			"settings":
			{
				"buffer_size": 352,
				"line_ending": "Unix",
				"name": "xml/etree/elementtree"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 67.0,
		"selected_items":
		[
			[
				"syntax lisp",
				"Set Syntax: Lisp"
			],
			[
				"syntax cof",
				"Set Syntax: CoffeeScript"
			],
			[
				"syntax coffeee",
				"Set Syntax: CoffeeScript (Literate)"
			],
			[
				"syntax pyth",
				"Set Syntax: Python"
			],
			[
				"bas",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"syntax plain",
				"Set Syntax: Plain Text"
			],
			[
				"syntax javascript",
				"Set Syntax: JavaScript"
			],
			[
				"syntax js",
				"Set Syntax: JavaScript"
			],
			[
				"syn cof",
				"Set Syntax: CoffeeScript"
			],
			[
				"syntax C",
				"Set Syntax: C"
			],
			[
				"syntax coffee",
				"Set Syntax: CoffeeScript"
			],
			[
				"syntax coffe",
				"Set Syntax: CoffeeScript"
			],
			[
				"syntax cofe",
				"Set Syntax: CoffeeScript"
			],
			[
				"syntax coff",
				"Set Syntax: CoffeeScript"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"",
				"Code Folding: Unfold All"
			],
			[
				"fold",
				"Code Folding: Unfold All"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/loic/repositories/loispy/src/loispy/interpreter/parsing.py",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/builtin.py",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/analysis.py",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/tests/test.loisp",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/stdlib/compile.loisp",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/utils.py",
		"/Users/loic/repositories/loispy/src/loispy/webapp/app.py",
		"/Users/loic/repositories/loispy/src/loispy/webapp/templates/index.html",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/error.py",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/symbol.py",
		"/Users/loic/repositories/loispy/src/loispy/webapp/static/js/app.js",
		"/Users/loic/repositories/loispy/src/loispy/webapp/static/js/app.coffee",
		"/Users/loic/repositories/loispy/src/loispy/webapp/static/css/app.css",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/codeobject.py",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/main.py",
		"/Users/loic/repositories/loispy/bin/loispy",
		"/Users/loic/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/loic/repositories/loispy/src/loispy/webapp/static/js/jquery-1.10.2.min.js",
		"/Users/loic/repositories/loispy/src/loispy/webapp/main.py",
		"/Users/loic/repositories/loispy/src/loispy/__init__.py",
		"/Users/loic/repositories/loispy/src/loispy/webapp/__init__.py",
		"/Users/loic/repositories/loispy/src/loispy/interpreter/__init__.py",
		"/Users/loic/repositories/loispy/src/parsing.py",
		"/Users/loic/repositories/loispy/src/utils.py",
		"/Users/loic/repositories/loispy/README.md",
		"/Users/loic/repositories/loispy/src/symbol.py",
		"/Users/loic/repositories/loispy/src/builtin.py",
		"/Users/loic/repositories/loispy/src/codeobject.py",
		"/Users/loic/repositories/loispy/src/error.py",
		"/Users/loic/repositories/loispy/src/procedure.py",
		"/Users/loic/repositories/loispy/src/analysis.py",
		"/Users/loic/repositories/loispy/src/environment.py",
		"/Users/loic/repositories/loispy/src/stdlib/builtinmacros.loisp",
		"/Users/loic/repositories/loispy/src/main.py",
		"/Users/loic/repositories/loispy/src/test/test_parsing.py",
		"/Users/loic/repositories/loispy/src/native.py",
		"/Users/loic/repositories/loispy/loispy.sublime-project",
		"/Users/loic/repositories/loispy/src/new-parsing.py",
		"/home/loic/repositories/loispy/loispy-scripts/funcs.loisp",
		"/home/loic/repositories/loispy/src/utils.py",
		"/home/loic/repositories/loispy/src/native.py",
		"/home/loic/repositories/sicp/interpreter.scm",
		"/home/loic/repositories/loispy/src/main.py",
		"/home/loic/repositories/loispy/src/parsing.py",
		"/home/loic/repositories/loispy/src/procedure.py",
		"/home/loic/repositories/loispy/src/loispylib/__init__.py",
		"/home/loic/repositories/loispy/src/loispylib/debug.py",
		"/home/loic/repositories/loispy/src/loispylib/procedure.py",
		"/home/loic/repositories/loispy/src/loispylib/analysis.py",
		"/home/loic/repositories/loispy/src/loispylib/main.py",
		"/home/loic/repositories/loispy/src/loispylib/utils.py",
		"/home/loic/repositories/loispy/src/loispylib/environment.py",
		"/home/loic/repositories/loispy/src/loispylib/parsing.py",
		"/home/loic/repositories/loispy/README.md",
		"/home/loic/repositories/loispy/bin/loispy",
		"/home/loic/repositories/loispy/src/test/test_parsing.py",
		"/home/loic/repositories/loispy/LICENSE.txt",
		"/home/loic/repositories/loispy/src/loispylib/test/__init__.py",
		"/home/loic/repositories/loispy/bin/losipy",
		"/home/loic/repositories/loispy/src/loispylib/repl.py",
		"/home/loic/repositories/loispy/src/loispylib/test/test_parsing.py",
		"/home/loic/repositories/cscheme/cscheme.c",
		"/home/loic/Dropbox/Loic/Schoffee/coffee/02__parsing.litcoffee",
		"/home/loic/Dropbox/Loic/Schoffee/coffee/04__primitives.litcoffee",
		"/home/loic/Dropbox/Loic/Schoffee/coffee/05__the_environment_model.litcoffee",
		"/home/loic/Dropbox/Loic/Schoffee/coffee/test.py",
		"/home/loic/Dropbox/Loic/Schoffee/coffee/06__repl.litcoffee",
		"/home/loic/Dropbox/Loic/Schoffee/coffee/03__syntactic_analysis.litcoffee",
		"/home/loic/Dropbox/Loic/Schoffee/build/js/schoffee.js",
		"/home/loic/Dropbox/Loic/Schoffee/coffee/01__introduction.litcoffee",
		"/home/loic/repositories/sicp/interpreter.coffee",
		"/home/loic/Dropbox/Loic/Schoffee/Cakefile",
		"/home/loic/Dropbox/Loic/Schoffee/Schoffee.sublime-project",
		"/Users/loic/Dropbox/Loic/Trio_website/bootstrap.min.js",
		"/Users/loic/Dropbox/Loic/Trio_website/kube.css",
		"/Users/loic/Dropbox/Loic/Trio_website/index.html",
		"/Users/loic/Dropbox/Loic/test_booleano/app.py",
		"/Users/loic/Dropbox/Loic/test_booleano/templates/index.html",
		"/Users/loic/Dropbox/Loic/test_booleano/QueryManager.py",
		"/Users/loic/Dropbox/Loic/formsapp/formserve.py",
		"/Users/loic/Dropbox/Loic/formsapp/LexicalFieldManager.py",
		"/Users/loic/Library/Application Support/Sublime Text 2/Packages/User/Default (OSX).sublime-keymap",
		"/Users/loic/repositories/phantombuyer/NavigationController.js",
		"/Users/loic/repositories/phantombuyer/OrderHandler.js",
		"/Users/loic/repositories/phantombuyer/phantombuyer.js",
		"/Users/loic/repositories/phantombuyer/amazon-selectors.js",
		"/Users/loic/repositories/Purr/purr/main.py",
		"/Users/loic/repositories/Purr/purr/core/__init__.py",
		"/Users/loic/repositories/phantombuyer/jquery-1.8.3.min.js",
		"/Users/loic/Dropbox/T3L 2011-2012/Mémoire/tex/redacted.tex",
		"/Users/loic/repositories/my-website/src/static/app.py",
		"/Users/loic/repositories/Purr/purr/core/processing/__init__.py",
		"/Users/loic/repositories/Purr/purr/core/preprocessing.py",
		"/Users/loic/repositories/Purr/purr/purr_logger.py",
		"/Users/loic/repositories/Purr/purr/purr.log",
		"/Users/loic/repositories/Purr/purr/logging.py",
		"/Users/loic/repositories/Purr/purr/__init__.py",
		"/Users/loic/repositories/Purr/purr/logging/__init__.py",
		"/Users/loic/repositories/Purr/purr/core/matching/__init__.py",
		"/Users/loic/repositories/Purr/purr/gui/__init__.py",
		"/Users/loic/repositories/Purr/bin/purr",
		"/Users/loic/repositories/Purr/Purr.sublime-project",
		"/Users/loic/repositories/Purr/purr/gui/PurrMainWindow.py",
		"/home/loic/repositories/Purr/purr/core/matching/levenshtein.py",
		"/home/loic/repositories/Purr/purr/logging/logger.py",
		"/home/loic/Purr/purr/exception/__init__.py",
		"/home/loic/Purr/purr/logging/__init__.py",
		"/home/loic/Purr/purr/core/matching/levenshtein",
		"/home/loic/Purr/purr/core/matching/__init__.py",
		"/home/loic/Purr/purr/core/__init__.py",
		"/home/loic/Purr/.gitignore",
		"/home/loic/Dropbox/Loic/Purr/app.py",
		"/home/loic/Dropbox/Loic/Purr/static/css/translationview.css",
		"/home/loic/Dropbox/Loic/Purr/templates/main.html",
		"/Users/loic/python/Purr/static/css/kube.css",
		"/Users/loic/python/Purr/static/grapher.js",
		"/Users/loic/python/graph/templates/main.html",
		"/Users/loic/python/graph/app.py",
		"/Users/loic/Dropbox/T3L 2011-2012/Mémoire/soutenance.txt",
		"/Users/loic/Dropbox/T3L 2011-2012/python/mytest.py",
		"/Users/loic/Documents/testquito/marco.html",
		"/Users/loic/Documents/testquito/marco_files/style.css",
		"/Users/loic/Dropbox/T3L 2011-2012/java/untitled.java",
		"/Users/loic/Dropbox/T3L 2011-2012/java/PhraseOMatic.java",
		"/Volumes/MUSIC/Uni Backups/T3L 2010-2011/TA_TAO/THE_UNIVERSAL_DECLARATION_OF_HUMAN_RIGHTS_GUYCHARD.tmx",
		"/Users/loic/Dropbox/T3L 2011-2012/python/ex42.py",
		"/Users/loic/Dropbox/T3L 2011-2012/python/testargv",
		"/Users/loic/Documents/dev/html/style.css"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"/Users/loic/repositories/loispy/src/loispy/interpreter"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"attribute",
			"is_tagged",
			"is_assignment",
			"is_quoted",
			"atom",
			"/",
			"is",
			"import",
			"raise",
			"paren_match",
			"eval",
			"d",
			"analyze_let",
			"d",
			"error",
			"from error",
			"\n",
			"\"",
			"getter",
			"expand_cond",
			"is_cond",
			"macro_expand",
			"proc?",
			"proc",
			"true",
			"lambda",
			"procdef",
			"lambda\"",
			"lambda",
			"get",
			"dict_literal",
			"_expand",
			"atom",
			"return  ",
			"#     \"(.+)\": lambda (.*):(.*),",
			"class (\\w+)\\(NativeProcedure\\):\\n    def __call__(\\(.*\\)): (.*)",
			"NativeProc",
			"cond",
			"cond-actions",
			"expand_clauses",
			"cond",
			"analyze_if",
			"if",
			"cond",
			"env",
			"\n        ",
			"find",
			"neq",
			"Environment.prototype",
			"        console\\.log.*arguments\\n",
			"\\W(\\w+)\\s?= (\\((\\w+\\s?,?)+\\)\\s?->)(\\n        |\\s)",
			" is_definition = (exp) -> ",
			"\\W(\\w+)\\s?= (\\((\\w+\\s?,?)+\\)\\s?->)(\\n        |\\s)",
			"arguments",
			"\\W(\\w+)\\s?= (\\((\\w+\\s?,?)+\\)\\s?->)(\\n        |\\s)",
			".apply(",
			".apply",
			"extend",
			"new Env",
			"make_procedure",
			"analyze_definition",
			"analyze_defintion",
			"is_primitive",
			"outer",
			"apply_primitive",
			"procedure_parameters",
			"is_application",
			"is_pair",
			"is_application",
			"procedure",
			"is_pair",
			"is_application",
			"symbol",
			"is_pair",
			"false",
			"tru",
			"true",
			"true?",
			"self",
			"bootstrap",
			"tabbable",
			"\\s+=",
			"\\t",
			"));\n",
			"red",
			"base",
			"'',\n",
			"body",
			"mo:singer",
			"opéra bastille",
			"config",
			"35",
			"cross-cultura",
			"g",
			"enriching ontologies",
			"KWDataList",
			"KWDataItem",
			"searchforma",
			"mustbeat",
			"animated",
			"dc:title",
			"releasetype",
			"dc:title",
			"morceau",
			"dc:title",
			"&",
			"&quot;",
			"ISRC",
			"mo:isrc",
			"\"?>",
			"br",
			"http",
			"deprecated",
			"téléchargement",
			"</td>",
			"<td>",
			"h4",
			"release_of",
			"type"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"'",
			"return ",
			"@natproc\\ndef \\1(\\2):\\n    return \\3\\n",
			"@natproc\\ndef \\1(\\2):\\n    return \\3",
			"@natproc\\ndef \\1(\\2):\\n    \\3",
			"@natproc\\ndef \\1\\2:\\n    \\3",
			"@natproc\\n\\1\\2:\\n    \\3",
			"NativeProcedure",
			"this",
			"",
			" \\1 = \\2\\n        console.log \"\\1\", arguments\\n        ",
			" \\1 = \\2\\n        console.log \"\\1\", arguments\\n         ",
			" \\1 = \\2\\n        console.log \"\\1\", \"\\2\"\\n         ",
			" \\1 = \\2\\n        console.log \"\\1\" + \"\\2\"\\n         ",
			" \\1 = \\2\\n        console.log \\1 + \\2\\n         ",
			" =",
			" ",
			"    ",
			"\""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "LICENSE.txt",
					"settings":
					{
						"buffer_size": 1079,
						"regions":
						{
						},
						"selection":
						[
							[
								55,
								55
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "README.md",
					"settings":
					{
						"buffer_size": 3143,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 133.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/loispy/interpreter/main.py",
					"settings":
					{
						"buffer_size": 2067,
						"regions":
						{
						},
						"selection":
						[
							[
								1435,
								1435
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/loispy/interpreter/builtin.py",
					"settings":
					{
						"buffer_size": 6284,
						"regions":
						{
						},
						"selection":
						[
							[
								118,
								118
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3352.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/loispy/interpreter/analysis.py",
					"settings":
					{
						"buffer_size": 13339,
						"regions":
						{
						},
						"selection":
						[
							[
								8100,
								8100
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4497.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/loispy/interpreter/symbol.py",
					"settings":
					{
						"buffer_size": 994,
						"regions":
						{
						},
						"selection":
						[
							[
								709,
								709
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 363.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/loispy/interpreter/parsing.py",
					"settings":
					{
						"buffer_size": 5176,
						"regions":
						{
						},
						"selection":
						[
							[
								3703,
								3703
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1524.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 7,
					"settings":
					{
						"buffer_size": 352,
						"regions":
						{
						},
						"selection":
						[
							[
								352,
								352
							]
						],
						"settings":
						{
							"auto_name": "xml/etree/elementtree",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.67126916956,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 197.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"analy",
				"src/loispy/interpreter/analysis.py"
			],
			[
				"error",
				"src/loispy/interpreter/error.py"
			],
			[
				"parsing",
				"src/loispy/interpreter/parsing.py"
			],
			[
				"en",
				"src/environment.py"
			],
			[
				"main",
				"src/main.py"
			],
			[
				"buil",
				"src/stdlib/builtinmacros.loisp"
			],
			[
				"proce",
				"src/procedure.py"
			],
			[
				"err",
				"src/error.py"
			],
			[
				"code",
				"src/codeobject.py"
			],
			[
				"built",
				"src/builtin.py"
			],
			[
				"utils",
				"src/utils.py"
			],
			[
				"anal",
				"src/analysis.py"
			],
			[
				"prmitive",
				"coffee/04__primitives.litcoffee"
			],
			[
				"",
				"/Users/loic/Dropbox/T3L 2011-2012/Mémoire/tex/biblio.bib"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 192.0,
	"status_bar_visible": true
}
